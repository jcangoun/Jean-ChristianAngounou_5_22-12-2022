{"version":3,"sources":["../src/setup.ts","../src/compress.ts","../src/compressInMemory.ts","../src/index.ts"],"sourcesContent":["/*!\n * node-minify\n * Copyright(c) 2011-2023 Rodolphe Stoclin\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nimport path from 'path';\nimport { globSync } from 'glob';\nimport { utils } from '@node-minify/utils';\nimport { Settings } from '@node-minify/types';\n\n/**\n * Default settings.\n */\nconst defaultSettings = {\n  sync: false,\n  options: {},\n  buffer: 1000 * 1024,\n  callback: false\n};\n\n/**\n * Run setup.\n *\n * @param {Object} inputSettings\n * @return {Object}\n */\nconst setup = (inputSettings: Settings) => {\n  let settings: Settings = Object.assign(utils.clone(defaultSettings), inputSettings);\n\n  // In memory\n  if (settings.content) {\n    checkMandatoriesMemoryContent(inputSettings);\n    return settings;\n  }\n\n  checkMandatories(inputSettings);\n\n  if (settings.input) {\n    settings = Object.assign(settings, wildcards(settings.input, settings.publicFolder));\n  }\n  if (settings.input && settings.output) {\n    settings = Object.assign(\n      settings,\n      checkOutput(settings.input, settings.output, settings.publicFolder, settings.replaceInPlace)\n    );\n  }\n  if (settings.input && settings.publicFolder) {\n    settings = Object.assign(settings, setPublicFolder(settings.input, settings.publicFolder));\n  }\n\n  return settings;\n};\n\n/**\n * Check the output path, searching for $1\n * if exist, returns the path remplacing $1 by file name\n *\n * @param {String|Array} input - Path file\n * @param {String} output - Path to the output file\n * @param {String} publicFolder - Path to the public folder\n * @param {Boolean} replaceInPlace - True to replace file in same folder\n * @return {Object}\n */\nconst checkOutput = (input: string | string[], output: string, publicFolder?: string, replaceInPlace?: boolean) => {\n  const reg = new RegExp('\\\\$1');\n  if (reg.test(output)) {\n    if (Array.isArray(input)) {\n      const outputMin = input.map(file =>\n        utils.setFileNameMin(file, output, replaceInPlace ? undefined : publicFolder, replaceInPlace)\n      );\n      return { output: outputMin };\n    } else {\n      return { output: utils.setFileNameMin(input, output, replaceInPlace ? undefined : publicFolder, replaceInPlace) };\n    }\n  }\n};\n\n/**\n * Handle wildcards in a path, get the real path of each files.\n *\n * @param {String|Array} input - Path with wildcards\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\nconst wildcards = (input: string | string[], publicFolder?: string) => {\n  // If it's a string\n  if (!Array.isArray(input)) {\n    return wildcardsString(input, publicFolder);\n  }\n\n  return wildcardsArray(input, publicFolder);\n};\n\n/**\n * Handle wildcards in a path (string only), get the real path of each files.\n *\n * @param {String} input - Path with wildcards\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\nconst wildcardsString = (input: string, publicFolder?: string) => {\n  const output: { input?: string[] } = {};\n\n  if (input.indexOf('*') > -1) {\n    output.input = getFilesFromWildcards(input, publicFolder);\n  }\n\n  return output;\n};\n\n/**\n * Handle wildcards in a path (array only), get the real path of each files.\n *\n * @param {Array} input - Path with wildcards\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\nconst wildcardsArray = (input: string[], publicFolder?: string) => {\n  const output: { input?: string[] } = {};\n  let isWildcardsPresent = false;\n\n  output.input = input;\n\n  // Transform all wildcards to path file\n  const inputWithPublicFolder = input.map(item => {\n    if (item.indexOf('*') > -1) {\n      isWildcardsPresent = true;\n    }\n    return (publicFolder || '') + item;\n  });\n\n  if (isWildcardsPresent) {\n    output.input = globSync(inputWithPublicFolder);\n  }\n\n  // Remove all wildcards from array\n  for (let i = 0; i < output.input.length; i++) {\n    if (output.input[i].indexOf('*') > -1) {\n      output.input.splice(i, 1);\n\n      i--;\n    }\n  }\n\n  return output;\n};\n\n/**\n * Get the real path of each files.\n *\n * @param {String} input - Path with wildcards\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\nconst getFilesFromWildcards = (input: string, publicFolder?: string) => {\n  let output: string[] = [];\n\n  if (input.indexOf('*') > -1) {\n    output = globSync((publicFolder || '') + input);\n  }\n\n  return output;\n};\n\n/**\n * Prepend the public folder to each file.\n *\n * @param {String|Array} input - Path to file(s)\n * @param {String} publicFolder - Path to the public folder\n * @return {Object}\n */\nconst setPublicFolder = (input: string | string[], publicFolder: string) => {\n  const output: { input?: string | string[] } = {};\n\n  if (typeof publicFolder !== 'string') {\n    return output;\n  }\n\n  publicFolder = path.normalize(publicFolder);\n\n  if (Array.isArray(input)) {\n    output.input = input.map(item => {\n      // Check if publicFolder is already in path\n      if (path.normalize(item).indexOf(publicFolder) > -1) {\n        return item;\n      }\n      return path.normalize(publicFolder + item);\n    });\n    return output;\n  }\n\n  input = path.normalize(input);\n\n  // Check if publicFolder is already in path\n  if (input.indexOf(publicFolder) > -1) {\n    output.input = input;\n    return output;\n  }\n\n  output.input = path.normalize(publicFolder + input);\n\n  return output;\n};\n\n/**\n * Check if some settings are here.\n *\n * @param {Object} settings\n */\nconst checkMandatories = (settings: Settings) => {\n  ['compressor', 'input', 'output'].forEach((item: string) => mandatory(item, settings));\n};\n\n/**\n * Check if some settings are here for memory content.\n *\n * @param {Object} settings\n */\nconst checkMandatoriesMemoryContent = (settings: Settings) => {\n  ['compressor', 'content'].forEach((item: string) => mandatory(item, settings));\n};\n\n/**\n * Check if the setting exist.\n *\n * @param {String} setting\n * @param {Object} settings\n */\nconst mandatory = (setting: string, settings: { [key: string]: any }) => {\n  if (!settings[setting]) {\n    throw new Error(setting + ' is mandatory.');\n  }\n};\n\n/**\n * Expose `setup()`.\n */\nexport { setup };\n","/*!\n * node-minify\n * Copyright(c) 2011-2023 Rodolphe Stoclin\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nimport fs from 'fs';\nimport mkdirp from 'mkdirp';\nimport { utils } from '@node-minify/utils';\nimport { Settings } from '@node-minify/types';\n\n/**\n * Run compressor.\n *\n * @param {Object} settings\n */\nconst compress = (settings: Settings): Promise<string> | string => {\n  if (typeof settings.compressor !== 'function') {\n    throw new Error(`compressor should be a function, maybe you forgot to install the compressor`);\n  }\n\n  if (settings.output) {\n    createDirectory(settings.output);\n  }\n\n  if (Array.isArray(settings.output)) {\n    return settings.sync ? compressArrayOfFilesSync(settings) : compressArrayOfFilesAsync(settings);\n  } else {\n    return utils.compressSingleFile(settings);\n  }\n};\n\n/**\n * Compress an array of files in sync.\n *\n * @param {Object} settings\n */\nconst compressArrayOfFilesSync = (settings: Settings): any => {\n  return (\n    Array.isArray(settings.input) &&\n    settings.input.forEach((input, index) => {\n      const content = utils.getContentFromFiles(input);\n      return utils.runSync({ settings, content, index });\n    })\n  );\n};\n\n/**\n * Compress an array of files in async.\n *\n * @param {Object} settings\n */\nconst compressArrayOfFilesAsync = (settings: Settings): Promise<string | void> => {\n  let sequence: Promise<string | void> = Promise.resolve();\n  Array.isArray(settings.input) &&\n    settings.input.forEach((input, index) => {\n      const content = utils.getContentFromFiles(input);\n      sequence = sequence.then(() => utils.runAsync({ settings, content, index }));\n    });\n  return sequence;\n};\n\n/**\n * Create folder of the target file.\n *\n * @param {String} file - Full path of the file\n */\nconst createDirectory = (file: string) => {\n  if (Array.isArray(file)) {\n    file = file[0];\n  }\n  const dir = file && file.substr(0, file.lastIndexOf('/'));\n  if (!dir) {\n    return;\n  }\n  if (!fs.statSync(dir).isDirectory()) {\n    mkdirp.sync(dir);\n  }\n};\n\n/**\n * Expose `compress()`.\n */\nexport { compress };\n","/*!\n * node-minify\n * Copyright(c) 2011-2023 Rodolphe Stoclin\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nimport { utils } from '@node-minify/utils';\nimport { Settings } from '@node-minify/types';\n\n/**\n * Run compressor.\n *\n * @param {Object} settings\n */\nconst compressInMemory = (settings: Settings): Promise<string> | string => {\n  if (typeof settings.compressor !== 'function') {\n    throw new Error(`compressor should be a function, maybe you forgot to install the compressor`);\n  }\n\n  return utils.compressSingleFile(settings);\n};\n\n/**\n * Expose `compress()`.\n */\nexport { compressInMemory };\n","/*!\n * node-minify\n * Copyright(c) 2011-2023 Rodolphe Stoclin\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\nimport { setup } from './setup';\nimport { compress } from './compress';\nimport { compressInMemory } from './compressInMemory';\nimport { Settings } from '@node-minify/types';\n\n/**\n * Run node-minify.\n *\n * @param {Object} settings - Settings from user input\n */\nconst minify = (settings: Settings) => {\n  return new Promise((resolve, reject) => {\n    const method: any = settings.content ? compressInMemory : compress;\n    settings = setup(settings);\n    if (!settings.sync) {\n      method(settings)\n        .then((minified: string) => {\n          if (settings.callback) {\n            settings.callback(null, minified);\n          }\n          resolve(minified);\n        })\n        .catch((err: Error) => {\n          if (settings.callback) {\n            settings.callback(err);\n          }\n          reject(err);\n        });\n    } else {\n      const minified: string = method(settings);\n      if (settings.callback) {\n        settings.callback(null, minified);\n      }\n      resolve(minified);\n    }\n  });\n};\n\n/**\n * Expose `minify()`.\n */\nminify.default = minify;\nexport = minify;\n"],"mappings":"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","names":["path","import_utils","fs","mkdirp","import_utils"]}